#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHAccel.h>
//#include <vector>

void play();
bool checkHit();
void display();
bool checkEdge(int, int);

class Player
{
public:
    Player(char = 'a', int = 50, int = 50);
    void move();
    void display();


private:
    char playerChar;// the char for displaying the character
   int positionX, positionY;
   // x is always less than 320 and y less than 240
};

class Enemy
{
public:
    Enemy( int startx, int starty,int endx, int endy, int speed);
    void moveEnemy();

private:
    int positionX, positionY;// screen size is 320 by 240
    // x is always less than 320 and y less than 240
    int speed = 1;// measured in pixels per cycle
    int beginX, beginY;
    int endX, endY;
    int radius = 5; // measured in pixels; we'll display these later using
    // FEHLCD .FillCircle
};

Player p; //creating player object p


int main(void)
{
    //main method stuff
    play();
}

void play()
{
    int start = TimeNow();
    int end = TimeNow();
    int mTime;
    while(!checkHit())
    {
        LCD.Clear(BLUE);
        p.display();//displaying every object at current location

        mTime = TimeNow()-end; //getting time since last move

        p.move(); //updating location of player
        //moveEnemies(mTime); //updating locaiton of every enemy with mTime affecting speed

        end = TimeNow();//keeping track of total time

          
         
    Enemy enemies[number_of_enemies];
    for(int i = 0; i < number_of_enemies; i++)
    {
        // start and end x should be between 0 and 319
        // start and end y should be between 0 and 239
        // start x, sstart y, end x, end y, speed
        
        // all enemies should start at the top and end at the bottom for now
        Enemy(rand() % 320,0,rand() % 320, 239, rand % 5);
    }
          
    }
}

Player::Player(char a, int x, int y)
{
    positionX = x;
    positionY = y;
    playerChar = a;
}

void Player::display()
{

    LCD.WriteAt(playerChar,positionX,positionY);
    //for loop for each Enemy in enemyVector
}

void Player::move()
{
    float x = Accel.X();
    float y = Accel.Y();


    if(!checkEdge(positionX,positionY))
    {
        positionX+=x*10;
        positionY-=y*10;
    }
    else
    {
        if (positionX+20>=319)
        {
             positionY-=y*10;
             if (x<0)
                 positionX+=x*10;
        }
        else if (positionX<=0)
        {
             positionY-=y*10;
             if (x>0)
                 positionX+=x*10;
        }
        else if (positionY+12>=239)
        {
             positionX+=x*10;
             if (y>0)
                 positionY-=y*10;
        }
        else if (positionY<=0)
        {
             positionX+=x*10;
             if (y<0)
                 positionY-=y*10;
        }
    }
}

bool checkEdge(int x, int y)
{
    if((x <= 0 || x+ 12 >= 319) || (y <= 0 || y + 12 >= 239))
    {
        // if the x is less than zero or greater than 320 pixels, OR
        // if the y is less than zero or greater than 240 pixels
            // it is indeed at or past the edge
       return true;


    }
    else return false;

}

bool checkHit()
{
    /*for(each Enemy in enemyVector)
    {
        if (p.positionX == e.positionX && p.positionY == e.positionY)
            return true;
    }*/

    return false;
}

void Enemy::moveEnemy()
{
    // for all enemies on screen
    for(int i = 0; i < number_of_enemies; i++)
    {
        // move them one pixel down
        // if it is at the edge, move it 
        enemies[i].positionY ++;
        
    }
    
}

