#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHAccel.h>
#include <stdlib.h>
//#include <algorithm>
//#include <vector>

#define number_of_enemies 2

void play();
bool checkHit();
bool checkEdge(int, int);
void menu();
void leaderboard();
void sort(int []);
void checkTouch(float *, float *);

int scores[5];

class Player
{
public:
    Player(char = 'a', int = 160, int = 120);
    void move();
    void display();



    char playerChar;// the char for displaying the character
   int positionX, positionY;
   // x is always less than 320 and y less than 240
};

class Enemy
{
public:
    Enemy(int y = 0, int s = 1, int lEdge = rand() % 289, int rEdge = 0);
    void moveEnemy();
    void display();
    void setStartPositions(int i);


    int positionY;// screen size is 320 by 240
    // x is always less than 320 and y less than 240
    int speed;// measured in pixels per cycle
    int leftEdge, rightEdge;


};

Player p; //creating player object p

Enemy enemyArray[number_of_enemies];



int main(void) //Written by Andy
{

    LCD.Clear(BLACK);
    menu();

}

void menu()
{

        LCD.Clear(BLACK);
        //main method display
        LCD.WriteLine("Welcome!");
        LCD.WriteLine("1.) New Game");
        LCD.WriteLine("2.) Leaderboards");
        LCD.WriteLine("3.) Quit");
        float xTouch, yTouch;
        bool test = true;

        while(test)
        {
            checkTouch(&xTouch, &yTouch);
            //LCD.WriteLine(xTouch);
            //LCD.WriteLine(yTouch);
            //Sleep(5.);

            if (xTouch<(12*12) && (yTouch >17 + 17 && yTouch <= 17*2 + 17))
                play();
            else if (xTouch<12*16 && (yTouch >17*2 + 17 && yTouch <= 17*3 + 17))
                leaderboard();
            else if (xTouch<12*8 && (yTouch >17*3 + 17 && yTouch <= 17*4 + 17))
            {
                test=false;
                LCD.Clear(BLACK);
                LCD.WriteLine("Goodbye");

            }
        }




}
void checkTouch(float *x,float *y)
{
    while(!LCD.Touch(x,y))
    {
        int stuff = 0;//nothing
    }
    return;
}

void play()
{



        for(int i = 0; i < number_of_enemies; i++)
        {
            enemyArray[i].setStartPositions(i);
        }
        int start = TimeNow();
        int end;
        int score = 0;
        while(!checkHit())
        {
            LCD.Clear(BLUE);
            p.display();//displaying every object at current location

            for(int i = 0; i < number_of_enemies; i++)
            {
                enemyArray[i].display();
                enemyArray[i].moveEnemy();
            }



            p.move(); //updating location of player
            //moveEnemies(mTime); //updating locaiton of every enemy with mTime affecting speed


            //score++;
        }
        end = TimeNow();//keeping track of total time

        score = end-start;

        if (score > scores[4])
            scores[4] = score;
        sort(scores);
        //sort(scores);

    LCD.Clear(RED);
    LCD.WriteLine("You Lose. Your score was:");
    LCD.WriteLine(score);
    Sleep(5.);
    menu();
}

Player::Player(char a, int x, int y)
{
    positionX = x;
    positionY = y;
    playerChar = a;
}

void Enemy::setStartPositions(int i)
{

        // for the first, set its position at the top of the screen
        // for each subsequent, subtract its position by i multiples of ((1/number_of_enemies) * 240)
        positionY = (-i*((1.0/number_of_enemies)*240.0));
        speed = 1;




}

Enemy::Enemy(int posY, int SpeedNew, int leftEdgeNew, int rightEdgeNew)
{

    //y position will depend on number of enemies;
    positionY = posY;
    speed = 1;
    leftEdge = leftEdgeNew;
    rightEdge = leftEdgeNew+30;

}

void Player::display()
{

    LCD.WriteAt(playerChar,positionX,positionY);

}
void Enemy::display()
{

        if (positionY>=0)
        {
            LCD.DrawRectangle(0,positionY,leftEdge, 7);
            LCD.DrawRectangle(leftEdge+30, positionY,319-(leftEdge+30),7);
        }


}

void Player::move()
{
    float x = Accel.X();
    float y = Accel.Y();


    if(!checkEdge(positionX,positionY))
    {
        positionX+=x*10;
        positionY-=y*10;
    }
    else
    {
        if (positionX+12>=319 && positionY<=0) //checking top right corner
        {
            if (x<0)
                positionX+=x*10;
            if (y<0)
                positionY-=y*10;

        }
        else if (positionX+12>=319 && positionY+17>=239) //checking bottom right corner
        {
            if (x<0)
                positionX+=x*10;
            if (y>0)
                positionY-=y*10;

        }
        else if (positionX<=0 && positionY<=0) //checking top left corner
        {
            if (x>0)
                positionX+=x*10;
            if (y<0)
                positionY-=y*10;

        }
        else if (positionX<=0 && positionY+17>=0) //checking bottom left corner
        {
            if (x>0)
                positionX+=x*10;
            if (y>0)
                positionY-=y*10;

        }
        else if (positionX+12>=319) // checking right side
        {
             positionY-=y*10;
             if (x<0)
                 positionX+=x*10;
        }
        else if (positionY<=0)//checking top side
        {
             positionX+=x*10;
             if (y<0)
                 positionY-=y*10;
        }
        else if (positionX<=0) //checking left side
        {
             positionY-=y*10;
             if (x>0)
                 positionX+=x*10;
        }
        else if (positionY+17>=239) //checking bottom side
        {
             positionX+=x*10;
             if (y>0)
                 positionY-=y*10;
        }

    }
}

bool checkEdge(int x, int y)
{
    if((x <= 0 || x+ 12 >= 319) || (y <= 0 || y + 17 >= 239))
    {
        // if the x is less than zero or greater than 320 pixels, OR
        // if the y is less than zero or greater than 240 pixels
            // it is indeed at or past the edge
       return true;


    }
    else return false;

}

bool checkHit()
{
    for (int i = 0; i < number_of_enemies; i++)
    {
        if(p.positionX<=enemyArray[i].leftEdge && (p.positionY >= enemyArray[i].positionY && p.positionY <= enemyArray[i].positionY+7))
            return true;
        else if(p.positionX>=enemyArray[i].rightEdge && (p.positionY >= enemyArray[i].positionY && p.positionY <= enemyArray[i].positionY+7))
            return true;
    }
    return false;
}
void Enemy::moveEnemy()
{
    // just increment the y position by the speed

    //if it is not touching the bottom edge
    if(positionY < 239)
    {
        positionY = positionY + speed;
    }else if(positionY >= 239)// if it is at the bottom edge or below it, set to zero and create a new hole position
    {
        positionY = 0;
        leftEdge = rand() % 289;
        rightEdge = leftEdge + 30;
        for (int i = 0; i < number_of_enemies; i++)
        {
            if(speed<=5)
                    enemyArray[i].speed++;
        }
    }

}

void sort(int s[])
{
    int temp;
    for (int x = 0; x < 4; x++)
    {
        for (int i = 4; i > x; i--)
        {
            if (s[i]>s[i-1])
            {
                temp = s[i];
                s[i] = s[i-1];
                s[i-1] = temp;
            }
        }
    }
}

void leaderboard()
{
    LCD.Clear(BLACK);
    LCD.WriteLine("Current High Scores");
    for (int i = 0; i < 5; i++)
    {
        LCD.Write(i+1); LCD.Write(".) "); LCD.WriteLine(scores[i]);
    }
    LCD.WriteLine("Return");
    float xTouch, yTouch;
    bool test = true;
    while(test)
    {
        checkTouch(&xTouch, &yTouch);
            if (xTouch<(12*6) && (yTouch >17*6 && yTouch <= 17*7))
            {
                test = false;
                menu();
            }
    }

}

